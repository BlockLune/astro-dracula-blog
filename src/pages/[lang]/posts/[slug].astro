---
import { getCollection, getEntry } from "astro:content";
import MarkdownPost from "@/components/markdown-post.astro";
import TocCard from "@/components/toc-card.tsx";
import BaseLayout from "@/layouts/base-layout.astro";
import { type Lang, ui } from "@/utils/i18n";
import { classifyByLangs, getLangFromId } from "@/utils/post";
import { getDescFromMdString } from "@/utils/markdown";
import { render } from "astro:content";

export async function getStaticPaths() {
  async function getPost(currentLang: Lang, slug: string) {
    let post = await getEntry("posts", `${currentLang}/${slug}`);
    if (!post) {
      for (const possibleLang of Object.keys(ui)) {
        if (currentLang === possibleLang) continue;
        post = await getEntry("posts", `${possibleLang}/${slug}`);
        if (post) break;
      }
    }
    return post!; // there should be a post at this point
  }

  const posts = await getCollection("posts");
  const classified = classifyByLangs(posts);
  const paths = [];

  for (const slug of classified.keys()) {
    for (const lang of Object.keys(ui)) {
      const post = await getPost(lang as Lang, slug);
      const headings = post ? (await render(post)).headings : [];
      paths.push({
        params: { lang: lang as Lang, slug },
        props: { post, headings },
      });
    }
  }
  return paths;
}

const { post, headings } = Astro.props;
const { lang, slug } = Astro.params;
const actualLangOfPost = getLangFromId(post.id);
const ogImageUrlToUse =
  post?.data.ogImageUrl || `/${actualLangOfPost}/og-images/${slug}.png`;
---

<BaseLayout
  title={post!.data.title}
  description={getDescFromMdString(post.body)}
  ogImageUrl={ogImageUrlToUse}
>
  <div class="relative">
    <div class="hidden 2xl:block fixed right-10 top-10 w-72">
      <TocCard headings={headings} lang={lang} client:load />
    </div>
    <MarkdownPost
      post={post}
      lang={lang}
      actualLang={actualLangOfPost}
      headings={headings}
    />
  </div>
</BaseLayout>
